//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Assets/My_Scripts/NewPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewPlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewPlayerInput"",
    ""maps"": [
        {
            ""name"": ""NewPlayer"",
            ""id"": ""06f28b74-c23d-4437-8426-9908b481f691"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e7c3dcff-0999-45ee-969e-9abe551decf9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""93b9d60b-8d63-4374-87b7-44dbcf3fa4f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractionAlter"",
                    ""type"": ""Button"",
                    ""id"": ""579ecdaf-3275-4d74-b8b5-5adc0ad393cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2f3cabcf-ac8f-4ae2-a044-7f278f73a529"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""22ab5c83-3914-4de5-a313-b4f44ecfd802"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""616f7d0c-f528-4f45-9c04-6e161c213ecb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ce9c3383-750c-4ab2-93f0-ffef71d1e989"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""97dacea8-bf40-463c-b35d-57c427572b80"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""e86f871f-635f-49d0-9081-5b132d052f00"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6598c6cd-c841-4b69-9b35-6a32b1455cfa"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5ac2131c-9679-46a6-bf66-0f5f4274dc56"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""45f0fdef-0138-4ed6-80a4-8f68558a83c5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""52b378d0-1ad5-4528-975e-c9be649d057d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a6532d23-2d1b-4826-af3e-8ebf3a07c78e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a39fe4b6-8e4a-41ac-a1af-2f2d62ccefde"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractionAlter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NewPlayer
        m_NewPlayer = asset.FindActionMap("NewPlayer", throwIfNotFound: true);
        m_NewPlayer_Move = m_NewPlayer.FindAction("Move", throwIfNotFound: true);
        m_NewPlayer_Interaction = m_NewPlayer.FindAction("Interaction", throwIfNotFound: true);
        m_NewPlayer_InteractionAlter = m_NewPlayer.FindAction("InteractionAlter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NewPlayer
    private readonly InputActionMap m_NewPlayer;
    private List<INewPlayerActions> m_NewPlayerActionsCallbackInterfaces = new List<INewPlayerActions>();
    private readonly InputAction m_NewPlayer_Move;
    private readonly InputAction m_NewPlayer_Interaction;
    private readonly InputAction m_NewPlayer_InteractionAlter;
    public struct NewPlayerActions
    {
        private @NewPlayerInput m_Wrapper;
        public NewPlayerActions(@NewPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_NewPlayer_Move;
        public InputAction @Interaction => m_Wrapper.m_NewPlayer_Interaction;
        public InputAction @InteractionAlter => m_Wrapper.m_NewPlayer_InteractionAlter;
        public InputActionMap Get() { return m_Wrapper.m_NewPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewPlayerActions set) { return set.Get(); }
        public void AddCallbacks(INewPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_NewPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NewPlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
            @InteractionAlter.started += instance.OnInteractionAlter;
            @InteractionAlter.performed += instance.OnInteractionAlter;
            @InteractionAlter.canceled += instance.OnInteractionAlter;
        }

        private void UnregisterCallbacks(INewPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
            @InteractionAlter.started -= instance.OnInteractionAlter;
            @InteractionAlter.performed -= instance.OnInteractionAlter;
            @InteractionAlter.canceled -= instance.OnInteractionAlter;
        }

        public void RemoveCallbacks(INewPlayerActions instance)
        {
            if (m_Wrapper.m_NewPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_NewPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NewPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NewPlayerActions @NewPlayer => new NewPlayerActions(this);
    public interface INewPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnInteractionAlter(InputAction.CallbackContext context);
    }
}
